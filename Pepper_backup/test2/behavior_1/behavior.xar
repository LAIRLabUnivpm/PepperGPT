<?xml version="1.0" encoding="UTF-8" ?><ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3"><Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram scale="84.0896"><Box name="receive_anim" id="2" localization="8" tooltip="receive" x="451" y="70"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[import sys
sys.path.append("/home/nao")
#sys.path.append("/home/peppergpt")

import paho.mqtt.publish as publish
import paho.mqtt.client as mqtt
import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALAnimatedSpeech')
        #self.tts.setLanguage("Italian")
        self.signalTTS = ALProxy('ALMemory')

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):

        host = "192.168.43.3"   # indirizzo broker
        #host = "peppergpt"
        #host = "localhost"

        def on_connect(client,userdata,flags,rc):
            client.subscribe([("/domanda1",0),("/risposta",0)])

            self.tts.say("Ponimi un quesito")

            time.sleep(2)
            publish.single("/domanda1","ok",hostname=host,port=1883,protocol=mqtt.MQTTv31,qos=0)

        def on_message(client,userdata,msg):

            stringa = msg.payload
            if stringa == "stop":
                publish.single("/domanda1","stop",hostname=host,port=1883,protocol=mqtt.MQTTv31,qos=0)
                client.disconnect()
                self.onStopped()

            if msg.topic == '/risposta':
                self.tts.say(stringa)
                while 1:
                    [a,b] = self.signalTTS.getData('ALTextToSpeech/Status')
                    if b == 'done':
                        time.sleep(2)
                        publish.single("/domanda1","ok",hostname=host,port=1883,protocol=mqtt.MQTTv31,qos=0)
                        break

        sub = mqtt.Client(protocol=mqtt.MQTTv31)

        sub.on_connect = on_connect
        sub.on_message = on_message

        sub.connect(host,keepalive=60)

        sub.loop_forever()

    def onInput_onStop(self):
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" /></Box><Box name="speech_Rec" id="1" localization="8" tooltip="" x="295" y="67"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.asr = ALProxy("ALSpeechRecognition")
        self.memory = ALProxy("ALMemory")
        self.tts = ALProxy("ALTextToSpeech")

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self):
        #self.asr.pause(False)
        self.asr.setLanguage("Italian")
        self.asr.setVocabulary( ["inizia","stop"],0)
        #self.memory.subscribeToEvent("WordRecognized", self.getName(), "onWordRecognized")
        #self.asr.subscribe("WordRecognized")
        while 1:
            self.asr.subscribe("WordRecognized")
            time.sleep(0.5)
            valore = self.memory.getData("WordRecognized")
            if valore[1] >= 0.5:
                self.asr.unsubscribe("WordRecognized")
                if valore[0] == 'inizia':
                    self.tts.say("inizia")
                    #self.onStopped()
                elif valore[0] == 'stop':
                    self.tts.say("stop")
                    #self.onStopped()
                    break
        #self.asr.unsubscribe("WordRecognized")
        self.onStopped()

    def onInput_onStop(self):
        self.onStopped() #activate the output of the box

    def onWordRecognized(self, key, value, message):
        if(len(value)) > 1 and value[1] >= 0.5:
            if value[0] == 'inizia':
                self.tts.say("inizia")
                #self.onStopped()
            elif value[0] == 'stop':
                self.tts.say("stop")
                self.onStopped()
            self.wordRecognized(value[0]) #~ activate output of the box
        else:
            self.onNothing()
            #self.getParameter("Confidence threshold (%)")/100.)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="speech_Rec (1)" id="3" localization="8" tooltip="" x="367" y="226"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[import time
sys.path.append("/home/nao")
import paho.mqtt.publish as publish
import paho.mqtt.client as mqtt

host = "192.168.43.3"

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.asr = ALProxy("ALSpeechRecognition")
        self.memory = ALProxy("ALMemory")
        #self.tts = ALProxy("ALTextToSpeech")
        self.tts = ALProxy('ALAnimatedSpeech')
        self.signalTTS = ALProxy('ALMemory')

    def mqttGPT(self):

        #host = "192.168.43.3"   # indirizzo broker
        #host = "peppergpt"

        def on_connect(client,userdata,flags,rc):
            client.subscribe([("/domanda1",0),("/risposta",0)])

            self.tts.say("Ponimi un quesito")

            time.sleep(2)
            publish.single("/domanda1","ok",hostname=host,port=1883,protocol=mqtt.MQTTv31,qos=0)

        def on_message(client,userdata,msg):

            stringa = msg.payload
            if stringa == "stop":
                #publish.single("/domanda1","stop",hostname=host,port=1883,protocol=mqtt.MQTTv31,qos=0)
                client.disconnect() #esce dal loop e ritorna in onInput_onStart
                #self.onStopped()

            if msg.topic == '/risposta':
                if stringa == "stop":
                    client.disconnect()
                else:
                    self.tts.say(stringa)
                    while 1:
                        [a,b] = self.signalTTS.getData('ALTextToSpeech/Status')
                        if b == 'done':
                            time.sleep(2)
                            publish.single("/domanda1","ok",hostname=host,port=1883,protocol=mqtt.MQTTv31,qos=0)
                            break

        sub = mqtt.Client(protocol=mqtt.MQTTv31)

        sub.on_connect = on_connect
        sub.on_message = on_message

        sub.connect(host,keepalive=60)

        sub.loop_forever()


    def onLoad(self):
        pass

    def onUnload(self):
        pass


    def onInput_onStart(self):
        self.istruzioni()
        self.asr.setLanguage("Italian")
        self.asr.setVocabulary( ["inizia","stop"],0)

        while 1:
            self.asr.subscribe("WordRecognized")
            time.sleep(0.5)
            valore = self.memory.getData("WordRecognized")
            if valore[1] >= 0.5:
                self.asr.unsubscribe("WordRecognized")
                if valore[0] == 'inizia':
                    self.tts.say("inizia")
                    self.mqttGPT()
                    #self.onStopped()
                elif valore[0] == 'stop':
                    self.tts.say("stop")
                    publish.single("/domanda1","stop",hostname=host,port=1883,protocol=mqtt.MQTTv31,qos=0)
                    break
        self.onStopped()


    def onInput_onStop(self):
        self.onStopped() #activate the output of the box


    def istruzioni(self):
        self.tts.say("Ciao! Per iniziare una conversazione, pronuncia la parola inizia. Per concludere, pronuncia 'stop'")
        self.wait_say()

    def wait_say(self):
        while 1:
            [a,b] = self.signalTTS.getData('ALTextToSpeech/Status')
            if b == 'done': break]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="0" indexofinput="4" outputowner="3" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box></ChoregrapheProject>